name: Vulnerability Report in PR Comments and Issues

on:
  pull_request:
    branches:
      - main
    types:
      - synchronize

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Generate token
      id: generate_token
      uses: tibdex/github-app-token@v1
      with:
        app_id: ${{ secrets.APP_ID }}
        private_key: ${{ secrets.PRIVATE_KEY }}

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build an image from Dockerfile
      run: |
        docker build -t trivy-test:${{ github.sha }} .

    # - name: Install Trivy
    #   run: |
    #     sudo apt-get install rpm
    #     wget https://github.com/aquasecurity/trivy/releases/download/v${{ env.TRIVY_VERSION }}/trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.deb
    #     sudo dpkg -i trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.deb

    # - name: Run Trivy vulnerability scanner on Terraform config
    #   run: |
    #     trivy config --severity HIGH,CRITICAL . > trivy-config-scan-result.txt
    #     trivy image --severity HIGH,CRITICAL trivy-test:${{ github.sha }} > trivy-image-scan-result.txt

    # イメージの脆弱性スキャン
    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'trivy-test:${{ github.sha }}'
        format: 'table'
        vuln-type: 'os,library'
        severity: 'HIGH,CRITICAL'
        output: 'trivy-image-results.txt'
        # ignore-unfixed: true # 未修正の脆弱性を無視

    # コンフィグファイルの脆弱性スキャン
    - name: Run Trivy vulnerability scanner on config
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        format: 'table'
        vuln-type: 'os,library'
        severity: 'HIGH,CRITICAL'
        output: 'trivy-config-results.txt'
        # ignore-unfixed: true # 未修正の脆弱性を無視

    # PRのコメント部分に脆弱性のスキャン結果を追加
    - name: Comment PR with Trivy scan results
      uses: actions/github-script@v3
      with:
        github-token: ${{ steps.generate_token.outputs.token }}
        script: |
          const fs = require('fs');
          const output = fs.readFileSync('trivy-image-results.txt', 'utf8');
          const issue_number = context.issue.number;
          const message = `## Trivy Image Vulnerability Scan Results \n\n\`\`\`\n${output}\n\`\`\``;
          github.issues.createComment({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });

    # PRのコメント部分にコンフィグの脆弱性スキャン結果を追加
    - name: Comment PR with Trivy config scan results
      uses: actions/github-script@v3
      with:
        github-token: ${{ steps.generate_token.outputs.token }}
        script: |
          const fs = require('fs');
          const output = fs.readFileSync('trivy-config-results.txt', 'utf8');
          const issue_number = context.issue.number;
          const message = `## Trivy Config Vulnerability Scan Results** \n\n\`\`\`\n${output}\n\`\`\``;
          github.issues.createComment({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });

    # イメージの脆弱性スキャン結果をGitHub Issueに追加
    - name: Create GitHub Issue from Trivy image scan results
      uses: actions/github-script@v3
      with:
        github-token: ${{ steps.generate_token.outputs.token }}
        script: |
          const fs = require('fs');
          const output = fs.readFileSync('trivy-image-results.txt', 'utf8');
          const title = "Trivy Image Vulnerability Scan Results";
          const message = `## Trivy Image Vulnerability Scan Results** \n\n\`\`\`\n${output}\n\`\`\`\nPlease review the vulnerabilities and take necessary actions.`;
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: message,
            labels: ['vulnerability', 'image']
          });

    # コンフィグの脆弱性スキャン結果をGitHub Issueに追加
    - name: Create GitHub Issue from Trivy config scan results
      uses: actions/github-script@v3
      with:
        github-token: ${{ steps.generate_token.outputs.token }}
        script: |
          const fs = require('fs');
          const output = fs.readFileSync('trivy-config-results.txt', 'utf8');
          const title = "Trivy Config Vulnerability Scan Results";
          const message = `## Trivy Config Vulnerability Scan Results** \n\n\`\`\`\n${output}\n\`\`\`\nPlease review the vulnerabilities and take necessary actions.`;
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: message,
            labels: ['vulnerability', 'config']
          });

    # # ISSUEに脆弱性のスキャン結果を追加（OSS）
    # - name: Create GitHub Issue from Trivy scan results
    #   uses: knqyf263/trivy-issue-action@main
    #   with:
    #     severity: 'HIGH,CRITICAL'
    #     label: 'vulnerability'
    #     skip-dirs: 'xxxxx'
    #     assignees: 'xxxxx'
    #     project-id: 'xxxxx'
    #   env:
    #     GH_TOKEN: ${{ steps.generate_token.outputs.token }}

    - name: Run Trivy vulnerability scanner with SARIF output
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        format: 'sarif'
        vuln-type: 'os,library'
        severity: 'HIGH,CRITICAL'
        output: 'trivy-config-results.sarif'

    - name: Upload SARIF Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-config-results.sarif'
